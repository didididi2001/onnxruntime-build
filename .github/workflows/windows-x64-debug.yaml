name: windows-x64-debug

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version information（e.g., 1.16.1）"
        required: true

permissions:
  contents: write

env:
  ONNXRUNTIME_VERSION:
    |- # Enter release tag name or version name in workflow_dispatch. Appropriate version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '1.17.0' }}

jobs:
  windows_x64_debug:
    name: Windows x64 ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022]
        python-version: ["3.8"]
        build_type: ["Debug", "RelWithDebInfo", "MinSizeRel"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache build result for ${{ env.ONNXRUNTIME_VERSION }}
        id: cache-build-result
        uses: actions/cache@v2
        with:
          path: onnxruntime-win-x64-static_lib-${{ matrix.build_type }}-${{ env.ONNXRUNTIME_VERSION }}
          key: onnxruntime-win-x64-${{ matrix.build_type }}-${{ env.ONNXRUNTIME_VERSION }}-cache-v1

      - name: ccache
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-x64-${{ matrix.build_type }}

      - name: Update ONNX Runtime
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo ${{ env.ONNXRUNTIME_VERSION }} > ONNXRUNTIME_VERSION
          git submodule update --init --depth=1 onnxruntime
          cd onnxruntime
          git fetch origin tag v${{ env.ONNXRUNTIME_VERSION }}
          git checkout v${{ env.ONNXRUNTIME_VERSION }}

          if [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.16.[0-9] ]]; then
            sed -i.bak '13d' onnxruntime/core/platform/windows/stacktrace.cc
            git status
            git diff
          fi

      - name: Download protoc
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          # see ./cmake/deps.txt
          if [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.14.[0-9] ]]; then
            curl -SL -o protoc-3.20.3-win64.zip https://github.com/protocolbuffers/protobuf/releases/download/v3.20.3/protoc-3.20.3-win64.zip
            ls -lh
            file protoc-3.20.3-win64.zip
            unzip protoc-3.20.3-win64.zip
          elif [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.1[567].[0-9] ]]; then
            curl -SL -o protoc-21.12-win64.zip https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-win64.zip
            ls -lh
            file protoc-21.12-win64.zip
            unzip protoc-21.12-win64.zip
          else
            echo "Unsupported version ${{ env.ONNXRUNTIME_VERSION }}"
            exit 1
          fi

          ./bin/protoc --version

      - name: Set environment variable
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "$GITHUB_WORKSPACE/bin"  >> "$GITHUB_PATH"

      - name: Display protoc info for ${{ env.ONNXRUNTIME_VERSION }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          protoc --version

      - name: Show current directory
        shell: bash
        run: |
          ls -lh
          echo $PWD

      - name: Install dependencies
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python3 -m pip install cmake
          cmake --version

      - name: Build onnxruntime for Windows x64
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          export CMAKE_CXX_COMPILER_LAUNCHER=ccache
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          cmake --version
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"

          export CMAKE_BUILD_TYPE=${{ matrix.build_type }}

          export CMAKE_OPTIONS='-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded$<$<CONFIG:Debug>:Debug> -DONNX_USE_MSVC_STATIC_RUNTIME=ON -Dprotobuf_MSVC_STATIC_RUNTIME=ON -Dgtest_force_shared_crt=OFF -A x64 -Donnxruntime_BUILD_UNIT_TESTS=OFF -DONNX_CUSTOM_PROTOC_EXECUTABLE=$GITHUB_WORKSPACE/bin/protoc'

          echo "CMAKE_OPTIONS: $CMAKE_OPTIONS"

          ./build-static_lib.sh

      - name: Collect result
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ls -lh output/static_lib/
          ls -lh output/static_lib/include
          ls -lh output/static_lib/lib

          dst=onnxruntime-win-x64-static_lib-${{ matrix.build_type }}-${{ env.ONNXRUNTIME_VERSION }}
          mkdir $dst
          mv -v output/static_lib/* $dst

      - name: zip results
        shell: bash
        run: |
          dst=onnxruntime-win-x64-static_lib-${{ matrix.build_type }}-${{ env.ONNXRUNTIME_VERSION }}
          tar cjvf $dst.tar.bz2 $dst
          ls -lh
          
      - uses: actions/upload-artifact@v3
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        with:
          name: onnxruntime-win-x64-static_lib-${{ matrix.build_type }}
          path: onnxruntime-win-x64-static_lib*.tar.bz2
